#!/usr/bin/env python

# Copyright (c) 2008 by Steingrim Dovland <steingrd@ifi.uio.no>

from euler import findfirst, primefactors, DefaultDict
from operator import mul

# The sequence of triangle numbers is generated by adding the natural
# numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 +
# 7 = 28. The first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#     1: 1
#     3: 1,3
#     6: 1,2,3,6
#    10: 1,2,5,10
#    15: 1,3,5,15
#    21: 1,3,7,21
#    28: 1,2,4,7,14,28
#
# We can see that the 7th triangle number, 28, is the first triangle
# number to have over five divisors.
#
# Which is the first triangle number to have over five-hundred divisors?

def triangle_numbers(upto=None):
    count = 1
    number = 1
    while not upto or upto > number:
        yield number
        count += 1
        number += count

def pe(x):
    d = DefaultDict(1) # set it to 1 so we don't have to map(+1) later
    for i in primefactors(x): d[i] += 1
    return d.values()

print findfirst(triangle_numbers(), lambda t: reduce(mul, pe(t), 1) > 500)

